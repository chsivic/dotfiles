"""""" vim-plug section """"""""
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
"
call plug#begin('~/.vim/plugged')
" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Multiple Plug commands can be written in a single line using | separators
"Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

Plug 'tpope/vim-fugitive'
"Plug 'gmarik/vundle'

"Plug 'altercation/vim-colors-solarized'
Plug 'sjl/badwolf'
Plug 'dracula/dracula-theme'
Plug 'dracula/vim'
Plug 'morhetz/gruvbox'

Plug 'majutsushi/tagbar'
Plug 'vim-scripts/ZoomWin'
"Plug 'jalcine/cmake.vim'
"Plug 'xolox/vim-misc'
"Plug 'xolox/vim-lua-ftplugin'
"Plug 'vim-scripts/luarefvim'
"Plug 'raymond-w-ko/vim-lua-indent'
Plug 'elzr/vim-json'
Plug 'vim-scripts/vim-json-bundle'
Plug 'ctrlpvim/ctrlp.vim'
"Plug 'Shougo/unite.vim'
"Plug 'tmhedberg/SimpylFold'
"Plug 'vim-syntastic/syntastic'
"Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'jlfwong/vim-mercenary'
Plug 'ludovicchabant/vim-lawrencium'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Using a non-master branch
"Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
"Plug 'fatih/vim-go', { 'tag': '*' }

" Plugin options
"Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

" Plugin outside ~/.vim/plugged with post-update hook
"Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Unmanaged plugin (manually installed and updated)
"Plug '~/my-prototype-plugin'

Plug 'octol/vim-cpp-enhanced-highlight'

" Initialize plugin system
call plug#end()



syntax on
set hlsearch
" Press Space to turn off highlighting and clear any message already displayed.
:nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>
:highlight Search term=reverse ctermfg=7 ctermbg=4 guifg=wheat guibg=peru
set ignorecase
set number
set relativenumber
colorscheme gruvbox
set background=dark
set pastetoggle=<F2>
set mouse=a "mouse scroll
set backspace=2

set encoding=utf-8

let g:ctrlp_working_path_mode = 'c'
let g:ctrlp_max_depth = 5
let g:ctrlp_show_hidden = 1

"Enable the ruler at the bottom of the screen"
:set ruler
:set laststatus=2
set statusline=   " clear the statusline for when vimrc is reloaded
set statusline+=%-3.3n\                      " buffer number
"set statusline=%f%h%m%r%y\ %{fugitive#statusline()}%=%c,%l/%L\ %P
set statusline+=%#todo#  "switch to todo highlight
set statusline=%f       "tail of the filename
set statusline+=%*       "switch back to normal statusline highlight
set statusline+=[%{FileSize()}]
"set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
"set statusline+=%{&ff}] "file format
set statusline+=%h      "help file flag
set statusline+=%m      "modified flag
set statusline+=%r      "read only flag
set statusline+=%y      "filetype
set statusline+=\ %{fugitive#statusline()}
set statusline+=%=      "left/right separator
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file

function! FileSize()
    let bytes = getfsize(expand("%:p"))
    if bytes <= 0
        return ""
    endif
    if bytes < 1024
        return bytes
    else
        return (bytes / 1024) . "K"
    endif
endfunction
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=2
set tabstop=2

"set lbr
"set tw=80

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

"au FileType tex set formatoptions=tcrq
filetype on
filetype plugin on
" associate *.foo with php filetype
" au BufRead,BufNewFile *.foo setfiletype php
" To override any filetype which was already detected, use this instead (note the 'set filetype=' syntax):
" au BufRead,BufNewFile *.module set filetype=php
au BufEnter,BufRead,BufNewFile *.pythonrc setfiletype python
au BufEnter,BufRead,BufNewFile *.mcconf setfiletype python
au BufEnter,BufRead,BufNewFile *.cconf setfiletype python
au BufEnter,BufRead,BufNewFile *.cinc setfiletype python
au BufEnter,BufRead,BufNewFile TARGETS setfiletype python
au BufEnter,BufRead,BufNewFile *.tw setfiletype python
au BufEnter,BufRead,BufNewFile *.materialized_JSON setfiletype json
au BufEnter,BufRead,BufNewFile .*.gdb setfiletype gdb

:syntax on
":set cindent
":set cinoptions=:0,t0,+4s,c1,(0,W4)100,*100
:set ts=8
":set smarttab
:set tw=80 showmode aw

map <leader>jt  <Esc>:%!python -m json.tool<CR>
map <C-K> :pyf /usr/local/share/clang/clang-format.py<CR>
imap <C-K> <ESC>:pyf /usr/local/share/clang/clang-format.py<CR>i

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Refactoring
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" http://stackoverflow.com/questions/597687/changing-variable-names-in-vim
"
" Move your cursor to the variable usage. Press gd. Which means - move cursor to
" the definition. Now Press [{ - this will bring you to the scope begin. Press V
" - will turn on Visual Line selection. Press % - will jump to the opposite }
" thus will select the whole scope. Press :s/ - start of the substitute command.
" <C-R>/ - will insert pattern that match variable name (that name you were on
" before pressing gd). /newname/gc<CR> - will initiate search and replace with
" confirmation on every match.

" For local replace
nnoremap gr gd[{V%:s/<C-R>///gc<left><left><left>

" For global replace
nnoremap gR gD:%s/<C-R>///gc<left><left><left>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ctags
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if hostname() =~ "sichen"
    let g:tagbar_ctags_bin="/usr/local/bin/ctags"
elseif hostname() =~ "devvm"
    let g:tagbar_ctags_bin="/bin/ctags"
endif
map <C-F12> :!ctags -R --c++-kinds=+pl --fields=+iaS --extra=+q .<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <F7> :NERDTreeToggle %<CR>

" This makes the tree use a more old school looking ui with no unicode chars.
" https://github.com/scrooloose/nerdtree/issues/108
let g:NERDTreeDirArrows=0

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TagBar
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <F8> :TagbarToggle<CR>
nmap <F9> :TagbarTogglePause<CR>
let g:tagbar_sort = 0
let g:tagbar_compact = 1
let g:tagbar_width = 60

let g:tagbar_type_tex = {
  \ 'ctagstype' : 'latex',
  \ 'kinds' : [
      \ 's:sections',
      \ 'g:graphics',
      \ 'l:labels',
      \ 'r:refs:1',
      \ 'L:listings',
      \ 'p:pagerefs:1'
  \ ],
  \ 'sort' : 0,
  \ }

let g:tagbar_type_bib= {
  \ 'ctagstype' : 'bibtex',
  \ 'kinds' : [
      \'a:article',
      \'b:book',
      \'m:misc',
      \'p:part',
      \'s:string',
      \'t:thesis',
    \]
  \}
let g:tagbar_type_text = {
  \ 'ctagstype' : 'text',
  \ 'kinds' : [
      \'c:chap',
    \]
  \}

let g:tagbar_type_diff = {
    \ 'ctagstype': 'diff',
    \ 'kinds': [
    \       'F:files'
    \       ]
    \ }

"let g:tagbar_type_shfwd = {
"    \ 'ctagstype': 'shfwd',
"    \ 'kinds': [
"    \       "S:capture",
"    \       ],
"    \ 'sort' : 0,
"    \ }
"
"let g:tagbar_type_tdl = {
"    \ 'ctagstype': 'tdl',
"    \ 'kinds': [
"    \       "e:enum",
"    \       "t:type",
"    \       "m:message",
"    \       "b:bundle",
"    \       ],
"    \ 'sort' : 0,
"    \ }
"
"let g:tagbar_type_ptl = {
"    \ 'ctagstype': 'ptl',
"    \ 'kinds': [
"    \       "s:subtransform",
"    \       "t:transform",
"    \       ],
"    \ 'sort' : 0,
"    \ }
"
"let g:tagbar_type_dp = {
"    \ 'ctagstype': 'dp',
"    \ 'kinds': [
"    \       "S:stage",
"    \       ],
"    \ 'sort' : 0,
"    \ }
"
"let g:tagbar_type_configuration = {
"    \ 'ctagstype': 'configuration',
"    \ 'kinds': [
"    \       "S:stage",
"    \       ],
"    \ 'sort' : 0,
"    \ }

let g:xml_syntax_folding=1
au FileType xml setlocal foldmethod=syntax
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" format xml
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! DoPrettyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tags
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " This will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy
  enough to delete
  " if you don't want it.
  " delete the fake tags
  2d
  $d
  " restore the 'normal' indentation, which
  is one extra level
  " too deep due to the extra tags we
  wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction
command! PrettyXML call DoPrettyXML()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cscope
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if has("cscope")
    set cscopetagorder=0
    set cscopetag
"    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
    " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    set csverb
endif


nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>

" Using 'CTRL-spacebar' then a search type makes the vim window
" split horizontally, with search result displayed in
" the new window.

nmap <C-\>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>

" Hitting CTRL-space *twice* before the search type does a vertical
" split instead of a horizontal one

nmap <C-\><C-\>s
            \:vert scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\><C-\>g
            \:vert scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\><C-\>c
            \:vert scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\><C-\>t
            \:vert scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\><C-\>e
            \:vert scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\><C-\>i
            \:vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\><C-\>d
            \:vert scs find d <C-R>=expand("<cword>")<CR><CR>

""""""""""""""""""""""""""""""""""""""""""""
" Cisco 
""""""""""""""""""""""""""""""""""""""""""""
"" When the cursor is over a reg_add_xxx press <F3> to search for
"" all references to reg_invoke_xxx.  Similarly when the cursor is
"" over reg_invoke_xxx <F3> will return references to reg_add_xxx.
""
"" Note: A cscope database must be loaded before this may be used
":if filereadable("/users/siche/script/ristewar/.vim/ios_registry_search.vim")
"    :source /users/siche/script/ristewar/.vim/ios_registry_search.vim
":endif
"
":command -nargs=? CSEiosPolarisDev cscope add /auto/ios-snaps/polaris_dev.snap/ios/cscope.out <args>
":command -nargs=? CSEPolarisDevNest cscope add /auto/mcpbuilds/binos-snaps/polaris_dev/cscope.out <args>
":command! CSE64 cscope kill 0 <CR> :set cscopeprg=/router/bin/cscope-64 <CR>
""nmap <F2> :set cscopeprg=/router/bin/cscope <CR> :CSE
"nmap <F2> :CSEPolarisDevNest binos <CR> :CSEiosPolarisDev vob <CR>
"
""check out a file"
":command CHeckout !cc_co -nc %:p
":command UNcheckout !cc_unco -f %:p


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search for visually selected text
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
vnoremap // y/<C-R>"<CR>
vnoremap <C-G> y:!fbgs <C-R>"<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-scripts/lua.com
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:let g:lua_compiler_name = '/users/siche/bin/luac'
