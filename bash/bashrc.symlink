# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

if [[ "$OSTYPE" == "linux" ]]; then
    export DISPLAY=`/users/siche/bin/get_vnc_display`
fi

# ... or force ignoredups and ignorespace
HISTCONTROL=ignorespace:ignoredups

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
export HISTSIZE=50000
export HISTFILESIZE=100000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# ?(pattern-list)       Matches zero or one occurrence of the given patterns.
# *(pattern-list)       Matches zero or more occurrences of the given patterns.
# +(pattern-list)       Matches one or more occurrences of the given patterns.
# @(pattern-list)       Matches one of the given patterns.
# !(pattern-list)       Matches anything except one of the given patterns.
shopt -s extglob

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes
export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

#    alias grep='grep --color=auto'
#    alias fgrep='fgrep --color=auto'
#    alias egrep='egrep --color=auto'

fi

# some more ls aliases
alias ll='ls -altr'
alias ll_images='ls -altrh $BINOS_ROOT/linkfarm/iso*/*.bin | grep -v recovery'
alias cp_cat3k='cp $BINOS_ROOT/linkfarm/iso*/cat3k*universal*SSA.bin'
alias cp_ct5760='cp $BINOS_ROOT/linkfarm/iso*/ct*ip*SSA.bin'
#alias la='ls -A'
#alias l='ls -CF'

# Useful utility for sending files to trash from command line instead of
#   permanently deleting with rm - see http://code.google.com/p/trash-cli/
alias tp='trash-put'

# Search all files on system using locate database
#   $1 = search term (file name)
function li() { locate -i "$1" | grep -i --color "$1"; }  # case-insensitive
#function l() { locate "$1" | grep --color "$1"; }         # case-sensitive
function lo() { locate -r "$1" | grep "$1" --color=always; } # search directories only

function cdll() { cd "$1"; ll; }

alias path='echo -e ${PATH//:/\\n}' # list $PATH
alias libpath='echo -e ${LD_LIBRARY_PATH//:/\\n}'
alias rm='rm -i'
alias date='date "+%F-%T"'
#alias gdb='gdb -tui'
alias dat='date +%Y%m%d'
alias du1='echo du\ --max-depth\ 1; du --max-depth 1' # 
alias cdpwd='cd `pwd -P`'
alias cdws='cd /ws/siche-sjc/'
alias setbinosroot='export BINOS_ROOT=`get_binos_root`'
alias cdbinosroot='setbinosroot; cd $BINOS_ROOT'
alias cdwsroot..='cd `dirname $BINOS_ROOT`'
alias cdiossys='cdbinosroot; cd ../ios/sys'
alias csios_dsgs7='cd /auto/ios-snaps/flo_dsgs7.snap/ios' 
alias csios_polaris='cd /auto/ios-snaps/polaris_dev.snap/'
alias csios_v161='cd /auto/ios-snaps/v161_0_throttle.snap/ios'
alias csngwc_pi3='cd /auto/uabu-build6/n_pi3_cscope/ngwc'
alias csngwc_amur='cd /auto/uabu-build6/nova_main_cscope/ngwc'
alias csngwc_beni='cd /auto/ecsgbuild10/nova_main_cscope_2014-09-27/ngwc'
alias cspolaris='cd /auto/mcpbuilds/binos-snaps/polaris_dev'
alias cspolaris_ios='cd /auto/ios-snaps/polaris_dev.snap/'
alias csthrottle='cd /auto/mcpbuilds/binos-snaps/v161_0_throttle'
alias csmacallan='cd /auto/mcpbuilds/binos-snaps/macallan_dev'
alias set_novaenv='source /nfs/nova/tools/latest/bin/set_novaenv'
alias make_dep='make dependancies'
alias mbs_cat3k='mbs bundle --gdb --specs=cat3k_caa-universalk9.bspec'
alias mbs_deploy_cat3k='mbs deploy --gdb --specs=cat3k_caa-universalk9.bspec'
alias mbs_cat3k_f='mbs bundle --gdb --specs=cat3k_caa-universalk9.bspec --force dependencies'
alias mbs_ct5760='mbs bundle --gdb --specs=ct5760-ipservicesk9.bspec'
alias mbs_deploy_ct5760='mbs deploy --gdb --specs=ct5760-ipservicesk9.bspec'
alias mbs_ct5760_f='mbs bundle --gdb --specs=ct5760-ipservicesk9.bspec --force dependencies'
alias mbs_cat4500='mbs -v -j32 build bundle --specs=cat4500es8-universalk9.bspec'
alias mingla_unbundle='/auto/reform/unbundle.py'
alias memdecoder='/ws/johnjaco-sjc/tools/memdecoder.py'
alias sshads='ssh siche@sjc-ads-4749'
alias ads=sshads
alias sshlnx='ssh siche@dsbu-lnx15'
alias sshmcp='ssh siche@mcp-bld-lnx-274'
alias mcp=sshmcp
alias sshxdm='ssh siche@sjc-xdm-114'
alias sshfs_ads='sshfs -o reconnect -C -o workaround=all -o allow_other,defer_permissions,IdentityFile=~/.ssh/id_rsa siche@sjc-ads-4749:/nobackup/siche/ /Users/siche/sjc-ads-4749/'
alias sshfs_umount='diskutil unmount force /Users/siche/sjc-ads-4749'
alias sshfs_list='ps aux | grep -i sftp | grep -v grep'
alias less_last_build_log='less `ls -rt buildlogs/*.log | tail -n 1`'
alias cc_patch_R='cc_patch -p_opts -R'
alias spectra_logs='cd $BINOS_ROOT/platforms/ngwc/doppler_sdk/spectra/logs/'
alias spectra_l2lisp='cd $BINOS_ROOT/platforms/ngwc/doppler_sdk/spectra/scripts/test_suite/L2Lisp/'
alias cdfeature='cd $BINOS_ROOT/platforms/ngwc/fed/feature/'
alias cdaal='cd $BINOS_ROOT/platforms/ngwc/doppler_sdk/aal/'
alias cdral='cd $BINOS_ROOT/platforms/ngwc/doppler_sdk/ralN/'
alias cdafd='cd $BINOS_ROOT/platforms/ngwc/doppler_sdk/afdN/'
alias spectra_split='python $BINOS_ROOT/platforms/ngwc/doppler_sdk/spectra/scripts/tools/logFileSplit.py -l'
alias my_spectra_split='python /ws/siche-sjc/macallan/logFileSplit.py -l'
alias spectra_test_runner='python $BINOS_ROOT/platforms/ngwc/doppler_sdk/spectra/scripts/test_runner.py'
alias my_test_runner='python /ws/siche-sjc/macallan/test_runner.py'
alias spectra_csv_analyzer='$BINOS_ROOT/platforms/ngwc/doppler_sdk/tools/scripts/csv_analyzer.py'
alias spectra_build='python $BINOS_ROOT/platforms/ngwc/doppler_sdk/tools/scripts/spectra_build.py'
alias gmk_spectraD='gmk -f NEW_CODE=1 Plx=-spectraD TARGET=host_ut_cge7 SPECTRA_BUILD=1 all-spectraD'
alias gmk_spectraDL='gmk -f NEW_CODE=1 Plx=-spectraDL TARGET=host_ut_cge7 SPECTRA_BUILD=1 all-spectraDL'
alias gmk_spectraDS='gmk -f NEW_CODE=1 Plx=-spectraDS TARGET=host_ut_cge7 SPECTRA_BUILD=1 all-spectraDS'
alias gmk_spectraCS='gmk -f NEW_CODE=1 Plx=-spectraCS TARGET=host_ut_cge7 SPECTRA_BUILD=1 all-spectraCS'
alias gmk_blueshiftD='gmk -f Plx=-ngwc TARGET=noarch source-ngwc'
alias gmk_blueshiftCS='gmk -f Plx=-ngwc TARGET=noarch source-ngwc'
alias gmk_edison='gmk -f Plx=-ngwc TARGET=mips64_cge7 all-ngwc'
alias clang='/auto/binos-tools/llvm38/cel6/llvm-3.8-p12/bin/clang'
alias iosd_make='$BINOS_ROOT/build/make_logtime /router/bin/make -C $BINOS_ROOT/../vob/ios/sys/obj-mips64-ngwc TARGET=mips64_cge7 GDB_FLAG=-g mips64_linux_iosd_ngwc-universalk9-ms ioucon'
alias gmk_nyquist='gmk -f Plx=-ngwc TARGET=x86_64_cge7 all-ngwc'
alias cdblueshift_='cd $BINOS_ROOT/platforms/ngwc/doppler_sdk/blueshift/'
alias fbe5_5='/auto/FBE-repo/prod/client/launcher -n cel5.50-x86_64-1.3'
alias cdcima_d='cd /auto/dsbu-asic-core/dglobal/view/head/cima/tbench/'
alias cdcima_ds='cd /auto/dopplerds/view/head/cima/tbench/'
alias cdcima_cs='cd /auto/dopplercs/view/dopplercs_cima/'
alias cdcima_e='cd /auto/dopplere/view/head/'

function blueshift_DopplerCS_run () {
    /auto/blueshift/mono/bin/mono $1 -asic=DopplerCS    \
    -rdl=/ws/siche-sjc/DopplerCSRMap_T0056.rdl.xml -rdlxmlroot=DopplerCSMap \
    -fc=advanced -x=asic_config_advancedFc_0x3c2.xml    \
    -o=asic_config_advancedFc_defaultDp_0x3c2.csv -d=asic_mapping_defines.h \
    -cima -n -log0xFFFF -db -dm -dt
}

function blueshift_DopplerD_run () {
    /auto/blueshift/mono/bin/mono $1 -asic=DopplerD    \
    -rdl=/ws/siche-sjc/DopplerDMap.simple.xml -rdlxmlroot=DopplerDMap \
    -fc=advanced -x=asic_config_advancedFc_0x3e1.xml    \
    -o=asic_config_advancedFc_defaultDp_0x3e1.csv -d=asic_mapping_defines.h \
    -cima -n -log0xFFFF -db -dm -dt
}

function build_fast_cat3k {
    [[ ${PWD##*/} != wafroot ]] && echo "Not in wafroot" && exit

    cd ngwc
    ORG_FED=`ls -l mips32/bin/fed`
    make-3.81
    NEW_FED=`ls -l mips32/bin/fed`
    cd ..
    if [ "$ORG_FED" = "$NEW_FED" ]; then
        return
    fi
    cp ngwc/mips32/bin/fed localrepo/ngwc/ng3k-platform_0.DEV-0_mips/usr/binos/bin/fed
    mbs bundle --specs=cat3k_caa-universalk9.bspec --uptodate all
}

function build_fast_ct5760 {
    [[ ${PWD##*/} != wafroot ]] && echo "Not in wafroot" && exit
    cd ngwc
    ORG_FED=`ls -l i686/bin/fed`
    make-3.81
    NEW_FED=`ls -l i686/bin/fed`
    cd ..
    if [ "$ORG_FED" = "$NEW_FED" ]; then
        return
    fi
    cp ngwc/i686/bin/fed localrepo/ngwc/ng3k-platform_0.DEV-0_i686/usr/binos/bin/fed
    mbs bundle --specs=ct5760-ipservicesk9.bspec --uptodate all
}

function edison ()
{
    declare -A server_port
    server_port[border]="172.19.72.89       2051"
    server_port[fe1]="172.19.72.120   2007"
    server_port[fe2]="172.19.72.120   2006"
    server_port[fe3]="172.19.72.89    2052"
    server_port[toyota]="172.19.72.116    2034"
    server_port[central]="172.19.72.118      2028"
    server_port[central2]="172.19.72.118  2017"
    server_port[island_border]="172.19.72.89    2061"
    server_port[island_edge1]="172.19.72.89     2044"
    server_port[island_edge2]="172.19.72.89     2058"
    if [ $# -eq 0 ] ; then
        for i in ${!server_port[@]}
        do
            echo "edison $i -> ${server_port[$i]}"
        done
        return
    fi
    if [ $# -eq 2 ] ; then
        if [ $2 == "c" ] ; then
            ts_crawler_clear_cmd ${server_port[$1]}
        fi
    fi
    echo "telnet ${server_port[$1]}"
    telnet  ${server_port[$1]}
}

function nyquist ()
{
    declare -A server_port
    server_port[baker]="172.19.72.120 2022"
    server_port[gubber]="172.19.72.120   2021"
    server_port[kaaliya]="172.19.72.89    2012"
    server_port[samba]="172.19.72.118    2027"
    if [ $# -eq 0 ] ; then
        for i in ${!server_port[@]}
        do
            echo "nyquist $i -> ${server_port[$i]}"
        done
        return
    fi
    if [ $# -eq 2 ] ; then
        if [ $2 == "c" ] ; then
            ts_crawler_clear_cmd ${server_port[$1]}
        fi
    fi
    echo "telnet ${server_port[$1]}"
    telnet  ${server_port[$1]}
}

function wlc ()
{
    declare -A server_port
    server_port[1]="172.19.72.120 2024"
    server_port[2]="172.19.72.89        2057"
    server_port[3]="172.19.72.116        2036"
    if [ $# -eq 0 ] ; then
        for i in ${!server_port[@]}
        do
            echo "wlc $i -> ${server_port[$i]}"
        done
        return
    fi
    if [ $# -eq 2 ] ; then
        if [ $2 == "c" ] ; then
            ts_crawler_clear_cmd ${server_port[$1]}
        fi
    fi
    echo "telnet ${server_port[$1]}"
    telnet  ${server_port[$1]}
}

function uci-mgmt ()
{
    declare -A server_port
    server_port[border]="172.20.50.28"
    server_port[fe1]="172.20.50.97"
    server_port[fe2]="172.20.50.96"
    server_port[fe3]="172.20.50.26"
    server_port[central2]="172.20.69.46"
    server_port[island_border]="172.20.50.19"
    server_port[island_edge1]="172.20.50.32"
    server_port[island_edge2]="172.20.69.49"
    server_port[baker]="172.20.50.24"
    server_port[orange]="172.20.69.54"
    server_port[lemon]="172.20.69.57"
    server_port[mob-border]="172.20.50.27"
    server_port[bush-1]="172.20.69.53"
    server_port[nyq_x86_1]="172.20.69.27"
    if [ $# -eq 0 ] ; then
        for i in ${!server_port[@]}
        do
            echo "uci-mgmt $i -> ${server_port[$i]}"
        done
        return
    fi
    echo "telnet ${server_port[$1]}"
    telnet  ${server_port[$1]}
}

function ap ()
{
    declare -A server_port
    server_port[48]="172.19.72.120   2020"
    server_port[f0]="172.19.72.89   2059"
    server_port[40]="172.19.72.89    2060"
    server_port[b1]="172.19.72.118    2029"
    server_port[3]="172.19.72.120    2023"
    server_port[1]="172.19.72.118    2026"
    server_port[0]="172.19.72.120    2023"
    if [ $# -eq 0 ] ; then
        for i in ${!server_port[@]}
        do
            echo "ap $i -> ${server_port[$i]}"
        done
        return
    fi
    if [ $# -eq 2 ] ; then
        if [ $2 == "c" ] ; then
            ts_crawler_clear_cmd ${server_port[$1]}
        fi
    fi
    echo "telnet ${server_port[$1]}"
    telnet ${server_port[$1]}
}

function uci ()
{
    if [ $# -eq 0 ] ; then
        python -c "import json, pprint;  pprint.pprint(json.load(open('/ws/siche-sjc/ts_data.json','r'))[1])"
        return
    fi
    server_port=`find_server_port $1`
    if [ $? != 0 ] ; then
        echo $server_port | tr ';' '\n'
        return
    fi

    echo "telnet $server_port"
    if [ $# -eq 2 ] ; then
        if [ $2 == "c" ] ; then
            ts_crawler_clear_cmd ${server_port}
        elif [ $2 == "who" ] ; then
            ts_crawler_inspect_cmd ${server_port}
            return
        fi
    fi
    telnet $server_port
}

function rwhere_linux ()
{
    [[ $# -ne 1 ]] && echo "Usage: $FUNCNAME archm121|kat120" && return;
    telnet `rwhere $1 | awk '{print $4}'`
}

function rwhere_ios ()
{
    [[ $# -lt 1 ]] && echo "Usage: $FUNCNAME archm121|kat120" && return;
    telnet_arg=`rwhere $1 | tr -s ": " " " | awk '{print $2,$3}'`
    [[ $2 == '-f' ]] && login_ts_and_clear_line $telnet_arg
    echo "telnet $telnet_arg"
    telnet $telnet_arg
}

function log_pkt_to_pcap()
{
    cat $1 | sed 's/^.*: //g' | awk '{printf("%05x0 ",NR-1); print $0}' > \
                    $1.text
    text2pcap $1.text $1.pcap
}

function files_in_ios_diff()
{
#cat $1 | grep -e Index | sed 's/Index: /  /g'
    cat $1 | grep -e ^Index: | sed 's/Index: //g' \
           | sed 's/^platforms/binos\/platforms/' \
           | sed 's/^infra/binos\/infra/' \
           | sed 's/^fman/binos\/fman/' \
           | sed 's/^punt_inject_api/binos\/punt_inject_api/' \
           | sed 's/^ios\/sys/vob\/ios\/sys/' \
           | sed 's/^ss\.comp/vob\/ss.comp/' \
           | sed 's/^gate/wcm\/gate/' 
}

function test_cases_in_dir ()
{
    ls $1/*.py | xargs -n1 basename | sed 's/.py//' | tr '\n' ':'
}

function err_in_log ()
{
    dir=$BINOS_ROOT/BUILD_LOGS/;
    vim +"/\ error[:]*\ \|\ \*\*\*\ \|undefined\ reference" `ls -rt $dir/* | tail -n 1`
}

function extract()      # Handy Extract Program.
{
     if [ -f $1 ] ; then
         case $1 in
             *.tar.bz2)   tar xvjf $1     ;;
             *.tar.gz)    tar xvzf $1     ;;
             *.bz2)       bunzip2 $1      ;;
             *.rar)       unrar x $1      ;;
             *.gz)        gunzip $1       ;;
             *.tar)       tar xvf $1      ;;
             *.tbz2)      tar xvjf $1     ;;
             *.tgz)       tar xvzf $1     ;;
             *.zip)       unzip $1        ;;
             *.Z)         uncompress $1   ;;
             *.7z)        7z x $1         ;;
             *)           echo "'$1' cannot be extracted via >extract<" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}



# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi


export PATH=/auto/gsg-sw/inst/share/bin/:$PATH
export PATH=$HOME/bin:/auto/binos-tools/bin:/auto/polaris-pool-tools/bin:$PATH
export LD_LIBRARY_PATH=$HOME/lib64:$LD_LIBRARY_PATH
export PYTHONPATH=/users/siche/python/:/users/siche/my-python-packages:/ws/siche-sjc/workspace/
export PYTHONSTARTUP=$HOME/.pythonrc
export EDITOR=vim
export SHELL=/bin/bash
export LESS="-m -F -X -R"
export PYTHONSTARTUP=$HOME/.pythonrc

#############################################
# ACME and clearcase
#############################################
export ACME_DIFF_OPTS="-p --context=5"
export CC_DIFF_OPTS="-p --context=5"
case $(hostname -s) in
    mcp*) export STORAGE_DIR=/scratch/siche/ ;;
    *ads*) export STORAGE_DIR=/nobackup/siche/ ;;
esac


#############################################
# Git
#############################################
if [ -f ~/.git-completion.bash ]; then
    source ~/.git-completion.bash
fi

function my_git_init ()
{
    if [ ! -d "binos" ]; then echo "Did not find binos directory"; return; fi
    BRANCH=`cat .ACMEROOT/ws.lu | grep binos | sed -e 's/binos \([0-9a-z_]*\).*/\1/g'`
    echo "$BRANCH"
    case $BRANCH in
        macallan_dev) REPO=/ws/siche-sjc/macallan_git/ ;;
        polaris_dev) REPO=/ws/siche-sjc/polaris_dev_git/ ;;
        v165_throttle) REPO=/ws/siche-sjc/polaris_dev_git/ ;;
        *) echo "Branch unknown: $BRANCH"; return ;;
    esac

    ln -s ios/sys/ vob/sys
    ln -s /ws/siche-sjc/.gitignore
    git init
#    if [ -d "vob/ios" ]; then
#        echo "Adding vob/ios submodule"
#        cd vob/ios
#        ln -s /ws/siche-sjc/.gitignore
#        git init
#        git add `cat /ws/siche-sjc/polaris_dev_ios_git/content.txt`
#        git remote add origin /ws/siche-sjc/polaris_dev_ios_git/
#        git ca -m "added ios files"
#        cd ../..
#        git submodule add ./vob/ios/.git/ vob/ios
#        git commit -m "added ios submodule"
#    fi

    for f in $REPO/content*
    do
        git add `cat $f`
    done
    git commit -m "added files"
    git remote add origin $REPO
    git fetch origin

    git lola
}

#############################################
# Colors
#############################################
# ANSI color codes
export RS="\033[0m"    # reset
export HC="\033[1m"    # hicolor
export UL="\033[4m"    # underline
export INV="\033[7m"   # inverse background and foreground
export FBLK="\033[30m" # foreground black
export FRED="\033[31m" # foreground red
export FGRN="\033[32m" # foreground green
export FYEL="\033[33m" # foreground yellow
export FBLE="\033[34m" # foreground blue
export FMAG="\033[35m" # foreground magenta
export FCYN="\033[36m" # foreground cyan
export FWHT="\033[37m" # foreground white
export BBLK="\033[40m" # background black
export BRED="\033[41m" # background red
export BGRN="\033[42m" # background green
export BYEL="\033[43m" # background yellow
export BBLE="\033[44m" # background blue
export BMAG="\033[45m" # background magenta
export BCYN="\033[46m" # background cyan
export BWHT="\033[47m" # background white

export BLACK="\033[0;30m"
export BLACKBOLD="\033[1;30m"
export RED="\033[0;31m"
export REDBOLD="\033[1;31m"
export GREEN="\033[0;32m"
export GREENBOLD="\033[1;32m"
export YELLOW="\033[0;33m"
export YELLOWBOLD="\033[1;33m"
export BLUE="\033[0;34m"
export BLUEBOLD="\033[1;34m"
export PURPLE="\033[0;35m"
export PURPLEBOLD="\033[1;35m"
export CYAN="\033[0;36m"
export CYANBOLD="\033[1;36m"
export WHITE="\033[0;37m"
export WHITEBOLD="\033[1;37m"
#source /users/siche/perl5/perlbrew/etc/bashrc
