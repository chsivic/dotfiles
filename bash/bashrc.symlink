# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

if [ -f ~/.bashrc_fb ]; then
    source ~/.bashrc_fb
fi
if [ -f ~/.bashrc_cisco ]; then
    source ~/.bashrc_cisco
fi

# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:erasedups

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
export HISTSIZE=150000
export HISTFILESIZE=-1
export HISTTIMEFORMAT="%Y%m%d %T "
export PROMPT_COMMAND="history -a; history -n;"

function dedup_history()
{
  nl ~/.bash_history | sort -k 2  -k 1,1nr| uniq -f 1 | sort -n | cut -f 2 > unduped_history
  cp unduped_history ~/.bash_history
}

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# ?(pattern-list)       Matches zero or one occurrence of the given patterns.
# *(pattern-list)       Matches zero or more occurrences of the given patterns.
# +(pattern-list)       Matches one or more occurrences of the given patterns.
# @(pattern-list)       Matches one of the given patterns.
# !(pattern-list)       Matches anything except one of the given patterns.
shopt -s extglob

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes
export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='[\$?:'"\[\033[1;31m\]\${PIPESTATUS[@]/#0/\[\033[0m\]\[\033[1;32m\]0\[\033[1;31m\]}\[\033[0m\]]"'\033[1;32m\h\033[0m:''\[\033[01;34m\]\w\[\033[00m\]''$(_scm_prompt)\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

#    alias grep='grep --color=auto'
#    alias fgrep='fgrep --color=auto'
#    alias egrep='egrep --color=auto'

fi

if [ -f /usr/share/scm/scm-prompt.sh ]; then
  source /usr/share/scm/scm-prompt.sh
elif [ -f $HOME/dotfiles/scm/scm-prompt.sh ]; then
  source $HOME/dotfiles/scm/scm-prompt.sh
fi

# some more ls aliases
alias ll='ls -altr'
#alias la='ls -A'
#alias l='ls -CF'

# Useful utility for sending files to trash from command line instead of
#   permanently deleting with rm - see http://code.google.com/p/trash-cli/
alias tp='trash-put'

# Search all files on system using locate database
#   $1 = search term (file name)
#function li() { locate -i "$1" | grep -i --color "$1"; }  # case-insensitive
#function l() { locate "$1" | grep --color "$1"; }         # case-sensitive
#function lo() { locate -r "$1" | grep "$1" --color=always; } # search directories only

#function cdll() { cd "$1"; ll; }

alias tf='tail -f'
alias cp='cp --backup=numbered'
alias ln='ln --backup=numbered'
alias mv='mv -f --backup=numbered'
alias path='echo -e ${PATH//:/\\n}' # list $PATH
alias libpath='echo -e ${LD_LIBRARY_PATH//:/\\n}'
alias rm='rm -i'
alias dat_tim='date "+%F.%H_%M_%S"'
alias dat='date +%Y%m%d'
alias du1='echo du\ --max-depth\ 1; du --max-depth 1' #
alias cdpwd='cd `pwd -P`'
alias cdfbcode='cd $FBCODE_DIR'
alias cdconf='cd /data/users/sichen/configerator'
alias cddsi='cd /data/users/sichen/configerator-dsi'
alias sshfs_dev='sshfs $USER@dev10742.prn1.facebook.com:/data/users/$USER ~/mnt/src -oauto_cache,reconnect,volname=src,defer_permissions'
alias sshfs_umount='kill -9 `pidof sshfs`; diskutil unmount force ~/mnt/src'
alias sshfs_list='ps aux | grep -i sftp | grep -v grep'
alias rm_newline="tr '\n' ' '"
alias rm_time_pid="sed -i 's/^[IVEW][0-9]\+\ [0-9]\+:[0-9]\+:[0-9\.]\+\ [0-9]*\ //'"
alias count_num_in_column="paste -sd+ | bc"  # merge line with + and bc
alias nobuckd="NO_BUCKD=1"
alias opt_anchocli="~/fbcode/buck-out/opt/gen/langtech/ninja/tools/anchocli/anchocli"
alias dev_anchocli="~/fbcode/buck-out/dev/gen/langtech/ninja/tools/anchocli/anchocli"
alias audio_hotel="~/fbcode/shortwave/test/data/audio_unittest.wav"
alias fstdraw_with_words='fstdraw --portrait=true --isymbols=words.txt --osymbols=words.txt'
alias fstprint_with_words='fstprint --isymbols=words.txt --osymbols=words.txt'

# Enable Vi key bindings
set -o vi

function log_pkt_to_pcap()
{
    cat $1 | sed 's/^.*: //g' | awk '{printf("%05x0 ",NR-1); print $0}' > \
                    $1.text
    text2pcap $1.text $1.pcap
}

function extract()      # Handy Extract Program.
{
     if [ -f $1 ] ; then
         case $1 in
             *.tar.bz2)   tar xvjf $1     ;;
             *.tar.gz)    tar xvzf $1     ;;
             *.bz2)       bunzip2 $1      ;;
             *.rar)       unrar x $1      ;;
             *.gz)        gunzip $1       ;;
             *.tar)       tar xvf $1      ;;
             *.tbz2)      tar xvjf $1     ;;
             *.tgz)       tar xvzf $1     ;;
             *.zip)       unzip $1        ;;
             *.Z)         uncompress $1   ;;
             *.7z)        7z x $1         ;;
             *)           echo "'$1' cannot be extracted via >extract<" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

function tw_resolve_to_host()
{
  tw resolve $1 | sed 's/:/\ /' | awk -F' ' '{printf("%s@%s\n",$2);}'
}
function tw_resolve_to_host_port()
{
  tw resolve $1 | sed 's/:/\ /' | awk -F' ' '{printf("%s@%s\n",$2,$5);}'
}
function hostport_from_tier()
{
  smcc ls -l $1 | grep ENABLED | head -n1 | sed 's/\ .*//'
}

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi
if [ -f /etc/bash_completion.d/mercurial.sh ] && ! shopt -oq posix; then
    . /etc/bash_completion.d/mercurial.sh
fi

export PATH=$HOME/bin:$PATH
#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/lib64:/usr/local/lib #:/usr/lib64
#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64/llvm/
export PYTHONSTARTUP=$HOME/.pythonrc
export EDITOR=vim # sudo yum install python-neovim
#export EDITOR=nvim # sudo yum install python-neovim
alias e='$EDITOR'
export SHELL=/bin/bash
export LESS="-m -F -X -R"
export PYTHONSTARTUP=$HOME/.pythonrc
export MANPATH=/usr/local/man:/usr/local/share/man:/usr/share/man:/usr/man

#############################################
# less
#############################################
# Colors
default=$(tput sgr0)
red=$(tput setaf 1)
green=$(tput setaf 2)
purple=$(tput setaf 5)
orange=$(tput setaf 9)

# Less colors for man pages
export PAGER=less
# Begin blinking
export LESS_TERMCAP_mb=$red
# Begin bold
export LESS_TERMCAP_md=$orange
# End mode
export LESS_TERMCAP_me=$default
# End standout-mode
export LESS_TERMCAP_se=$default
# Begin standout-mode - info box
export LESS_TERMCAP_so=$purple
# End underline
export LESS_TERMCAP_ue=$default
# Begin underline
export LESS_TERMCAP_us=$green

#############################################
# Git
#############################################
if [ -f ~/.git-completion.bash ]; then
    source ~/.git-completion.bash
fi

#############################################
# Colors
#############################################
# ANSI color codes
export RS="\033[0m"    # reset
export HC="\033[1m"    # hicolor
export UL="\033[4m"    # underline
export INV="\033[7m"   # inverse background and foreground
export FBLK="\033[30m" # foreground black
export FRED="\033[31m" # foreground red
export FGRN="\033[32m" # foreground green
export FYEL="\033[33m" # foreground yellow
export FBLE="\033[34m" # foreground blue
export FMAG="\033[35m" # foreground magenta
export FCYN="\033[36m" # foreground cyan
export FWHT="\033[37m" # foreground white
export BBLK="\033[40m" # background black
export BRED="\033[41m" # background red
export BGRN="\033[42m" # background green
export BYEL="\033[43m" # background yellow
export BBLE="\033[44m" # background blue
export BMAG="\033[45m" # background magenta
export BCYN="\033[46m" # background cyan
export BWHT="\033[47m" # background white

export BLACK="\033[0;30m"
export BLACKBOLD="\033[1;30m"
export RED="\033[0;31m"
export REDBOLD="\033[1;31m"
export GREEN="\033[0;32m"
export GREENBOLD="\033[1;32m"
export YELLOW="\033[0;33m"
export YELLOWBOLD="\033[1;33m"
export BLUE="\033[0;34m"
export BLUEBOLD="\033[1;34m"
export PURPLE="\033[0;35m"
export PURPLEBOLD="\033[1;35m"
export CYAN="\033[0;36m"
export CYANBOLD="\033[1;36m"
export WHITE="\033[0;37m"
export WHITEBOLD="\033[1;37m"

################
# facebook
################
# Lets you cd to these directories from any directory
# by using the last node only (e.g. 'cd fbmake')
CDPATH='.:~:~/www:~/fbmake:~/bin:~/logs'
FBCODE_DIR="$HOME"/fbsource/fbcode
FBCODE_PLATFORM=gcc-5-glibc-2.23
TP2="$FBCODE_DIR"/third-party-buck/"$FBCODE_PLATFORM"/build
export CLASSPATH="$CLASSPATH:$HOME/fbcode/hiveio/jars/hiveio-wrapper-1.0-SNAPSHOT-standalone.jar:"
#export PATH=$PATH:/var/www/scripts/bin/
function add_kaldi_path ()
{
  kaldi_tp2=`dirname $FBCODE_DIR/third-party2/kaldi/master/gcc-5-glibc-2.23/*/bin`
  openfst_tp2=`dirname $FBCODE_DIR/third-party2/openfst-kaldi/1.6.7/gcc-5-glibc-2.23/*/bin`
  export PATH=$PATH:$kaldi_tp2/bin:$openfst_tp2/bin
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$openfst_tp2/lib/
}
function sync_config ()
{
  /usr/facebook/configerator-client/bin/configeratorc getConfig "$1";
  /usr/facebook/configerator-client/bin/configeratorc subscribeToConfig "$1"
}
BENCHIE_CONFIG=shortwave/benchie/benchie
SHORTWAVE_CONFIG=shortwave/domain_shard_config # Needed by ASR

alias hsnc='hg status --no-status --change'
alias hsnm='hg status --no-status --modified'

# Open all files in current commit in tabs, then close all the tabs
alias vh='vim -p $(hsnm .) -c tabo'
# Now the files can be accessed using BufExplorer

################
# fzf
################
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

_fzf_complete_fbpkg() {
  _fzf_complete '-m' "$@" < <(
    fbpkg list
  )
}
complete -o default -o bashdefault -F _fzf_complete_fbpkg fbpkg
_fzf_complete_tw() {
  _fzf_complete '-m' "$@" < <(
    tw search --value 'ownership.oncall_team == language_technology_asr_product'
  )
}
complete -o default -o bashdefault -F _fzf_complete_tw tw
_fzf_complete_smcc() {
  _fzf_complete '-m' "$@" < <(
    smcc help
  )
}
complete -o default -o bashdefault -F _fzf_complete_smcc smcc

# Added by pyenv
if [ -z "$LD_LIBRARY_PATH" ]; then
    export LD_LIBRARY_PATH=/data/users/sichen/pypy/ubuntu_libssl/prod
else
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/data/users/sichen/pypy/ubuntu_libssl/prod
fi
###
